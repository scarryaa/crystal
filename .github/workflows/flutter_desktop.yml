name: Flutter Desktop Build

permissions:
  contents: write
  id-token: write 

env:
  FLUTTER_VERSION: '3.24.4'
  FLUTTER_CHANNEL: 'stable'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable Windows build
        run: flutter config --enable-windows-desktop
      
      - name: Build Windows
        run: flutter build windows
      
      - name: Upload Windows Build
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: build/windows/x64/runner/Release/crystal.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable macOS build
        run: flutter config --enable-macos-desktop
      
      - name: Build macOS
        run: flutter build macos
      
      - name: Create macOS Archive
        if: runner.os == 'macOS'
        run: |
          cd build/macos/Build/Products/Release
          zip -r crystal.zip *.app
          
      - name: Upload macOS Build
        uses: actions/upload-artifact@v3
        with:
          name: macos-build
          path: build/macos/Build/Products/Release/crystal.zip

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev fuse libfuse2
          # Configure FUSE
          sudo modprobe fuse
          sudo groupadd fuse || true
          sudo usermod -a -G fuse $USER
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable Linux build
        run: flutter config --enable-linux-desktop
      
      - name: Build Linux
        run: flutter build linux
      
      - name: Setup AppDir
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo/crystal-logo.png AppDir/usr/share/icons/hicolor/256x256/apps/crystal.png
          chmod +x AppDir/usr/bin/crystal
      
      - name: Create desktop file
        run: |
          cat > AppDir/crystal.desktop << EOL
          [Desktop Entry]
          Name=Crystal
          Exec=crystal
          Icon=crystal
          Type=Application
          Categories=Development;
          EOL
          
          # Make desktop file executable
          chmod +x AppDir/crystal.desktop
          # Move desktop file to correct location
          mkdir -p AppDir/usr/share/applications
          cp AppDir/crystal.desktop AppDir/usr/share/applications/crystal.desktop
      
      - name: Build AppImage
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          # Extract AppImage contents since FUSE might still have issues in CI
          ./appimagetool --appimage-extract
          # Use extracted AppImage contents to build
          ./squashfs-root/AppRun AppDir
      
      - name: Upload Linux Build
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: Crystal*.AppImage

  test-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
      
      - name: Analyze project source
        run: flutter analyze
      
      # - name: Run tests
      #   run: flutter test

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Prepare Release Files
        run: |
          mkdir -p release
          cp windows-build/crystal.exe release/crystal-${{ github.run_number }}.exe
          cp macos-build/crystal.zip release/crystal-${{ github.run_number }}.zip
          cp linux-build/Crystal*.AppImage release/crystal-${{ github.run_number }}.AppImage
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            release/crystal-${{ github.run_number }}.exe
            release/crystal-${{ github.run_number }}.zip
            release/crystal-${{ github.run_number }}.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
