name: Flutter Desktop Build

permissions:
  contents: write
  id-token: write 

env:
  FLUTTER_VERSION: '3.24.4'
  FLUTTER_CHANNEL: 'stable'
  APP_NAME: 'crystal'

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable Windows build
        run: flutter config --enable-windows-desktop
      
      - name: Build Windows
        run: flutter build windows --release
      
      - name: Create Windows Release Package
        run: |
          $VERSION = "${{ github.ref_name }}"
          if ($VERSION -notmatch '^v') { $VERSION = "v${{ github.run_number }}" }
          $PACKAGE_NAME = "${{ env.APP_NAME }}-windows-$VERSION"
          
          mkdir windows-package
          xcopy /E /I "build\windows\x64\runner\Release\*" "windows-package"
          Compress-Archive -Path windows-package\* -DestinationPath "$PACKAGE_NAME.zip"
      

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ env.APP_NAME }}-windows-*.zip
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable macOS build
        run: flutter config --enable-macos-desktop
      
      - name: Build macOS
        run: flutter build macos --release
      
      - name: Create macOS Archive
        run: |
          VERSION="${{ github.ref_name }}"
          if [[ ! $VERSION == v* ]]; then
            VERSION="v${{ github.run_number }}"
          fi
          PACKAGE_NAME="${{ env.APP_NAME }}-macos-$VERSION"
          
          cd build/macos/Build/Products/Release
          ditto -c -k --keepParent *.app "$PACKAGE_NAME.zip"
          mv "$PACKAGE_NAME.zip" $GITHUB_WORKSPACE/
          
      - name: Upload macOS Build
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: ${{ env.APP_NAME }}-macos-*.zip
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev fuse libfuse2
          # Configure FUSE
          sudo modprobe fuse
          sudo groupadd fuse || true
          sudo usermod -a -G fuse $USER
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable Linux build
        run: flutter config --enable-linux-desktop
      
      - name: Build Linux
        run: flutter build linux
      
      - name: Setup AppDir
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo/crystal-logo.png AppDir/crystal.png
          chmod +x AppDir/usr/bin/crystal
  
      - name: Create AppRun file
        run: |
          cat > AppDir/AppRun << EOL
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/crystal" "\$@"
          EOL
          chmod +x AppDir/AppRun
  
      - name: Create desktop file
        run: |
          cat > AppDir/crystal.desktop << EOL
          [Desktop Entry]
          Name=Crystal
          Exec=crystal
          Icon=crystal
          Type=Application
          Categories=Development;
          EOL
          
          # Make desktop file executable
          chmod +x AppDir/crystal.desktop
          # Move desktop file to correct location
          mkdir -p AppDir/usr/share/applications
          cp AppDir/crystal.desktop AppDir/usr/share/applications/crystal.desktop
      
      - name: Build AppImage
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          # Extract AppImage contents since FUSE might still have issues in CI
          ./appimagetool --appimage-extract
          # Use extracted AppImage contents to build
          ./squashfs-root/AppRun AppDir
      
      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: Crystal*.AppImage
          if-no-files-found: error

  test-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
      
      - name: Analyze project source
        run: flutter analyze
      
      - name: Run tests
        run: flutter test || echo "No tests found"

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4  
        with:
          path: downloaded-artifacts
          pattern: "*-build"  
          merge-multiple: true
      
      - name: Debug Artifacts
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Downloaded artifacts directory contents:"
          ls -la downloaded-artifacts
      
      - name: Prepare Release Files
        run: |
          VERSION="${{ github.ref_name }}"
          if [[ ! $VERSION == v* ]]; then
            VERSION="v${{ github.run_number }}"
          fi
          
          mkdir -p release
          
          if [ -d "downloaded-artifacts" ]; then
            echo "Found downloaded-artifacts directory"
            echo "Contents of downloaded-artifacts:"
            ls -la downloaded-artifacts/
            
            # Copy all zip files and AppImages to release directory
            find downloaded-artifacts -type f \( -name "*.zip" -o -name "*.AppImage" \) -exec cp -v {} release/ \;
          else
            echo "Error: downloaded-artifacts directory not found!"
            pwd
            ls -la
            exit 1
          fi
          
          echo "Files in release directory:"
          ls -la release/
          
          # Verify files were copied
          if [ -z "$(ls -A release/)" ]; then
            echo "Error: No artifacts found to release!"
            exit 1
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name == 'main' && format('v{0}', github.run_number) || github.ref_name }}
          name: Release ${{ github.ref_name == 'main' && github.run_number || github.ref_name }}
          draft: false
          prerelease: false
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
