name: Flutter Desktop Build

permissions:
  contents: write
  id-token: write

env:
  FLUTTER_VERSION: '3.24.4'
  FLUTTER_CHANNEL: 'stable'
  APP_NAME: 'crystal'
  APP_VERSION: v0.6.2-beta.4
 

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'  
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Enable Windows build
        run: flutter config --enable-windows-desktop

      - name: Build Windows
        run: flutter build windows --release

      - name: Create Windows Release Package
        run: |
          $VERSION = "${{ github.ref_type == 'tag' && github.ref_name || env.APP_VERSION }}"
          $PACKAGE_NAME = "${{ env.APP_NAME }}-windows-$VERSION"
          
          # Create version.txt file
          New-Item -Path "build\windows\x64\runner\Release\version.txt" -ItemType "file" -Value "$VERSION"
          
          # Create package directory and copy files
          mkdir windows-package
          xcopy /E /I "build\windows\x64\runner\Release\*" "windows-package"
          
          # Create ZIP archive
          Compress-Archive -Path windows-package\* -DestinationPath "$PACKAGE_NAME.zip"

      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ env.APP_NAME }}-windows-*.zip
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable macOS build
        run: flutter config --enable-macos-desktop
      
      - name: Build macOS
        run: flutter build macos --release
      
      - name: Create macOS Archive
        run: |
          VERSION="${{ github.ref_type == 'tag' && github.ref_name || env.APP_VERSION }}"
          PACKAGE_NAME="${{ env.APP_NAME }}-macos-$VERSION"
          
          # Create version.txt inside the app bundle
          echo "$VERSION" > "build/macos/Build/Products/Release/${{ env.APP_NAME }}.app/Contents/version.txt"
          
          cd build/macos/Build/Products/Release
          ditto -c -k --keepParent *.app "$PACKAGE_NAME.zip"
          mv "$PACKAGE_NAME.zip" $GITHUB_WORKSPACE/
          
      - name: Upload macOS Build
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: ${{ env.APP_NAME }}-macos-*.zip
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev fuse libfuse2
          # Configure FUSE
          sudo modprobe fuse
          sudo groupadd fuse || true
          sudo usermod -a -G fuse $USER
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Enable Linux build
        run: flutter config --enable-linux-desktop
      
      - name: Build Linux
        run: flutter build linux
      
      - name: Setup AppDir
        run: |
          VERSION="${{ github.ref_type == 'tag' && github.ref_name || env.APP_VERSION }}"
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy application files
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo/crystal-logo.png AppDir/crystal.png
          
          # Create version.txt
          echo "$VERSION" > AppDir/usr/bin/version.txt
          
          chmod +x AppDir/usr/bin/crystal
 
      - name: Create AppRun file
        run: |
          cat > AppDir/AppRun << EOL
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/crystal" "\$@"
          EOL
          chmod +x AppDir/AppRun
  
      - name: Create desktop file
        run: |
          cat > AppDir/crystal.desktop << EOL
          [Desktop Entry]
          Name=Crystal
          Exec=crystal
          Icon=crystal
          Type=Application
          Categories=Development;
          EOL
          
          # Make desktop file executable
          chmod +x AppDir/crystal.desktop
          # Move desktop file to correct location
          mkdir -p AppDir/usr/share/applications
          cp AppDir/crystal.desktop AppDir/usr/share/applications/crystal.desktop
      
      - name: Build AppImage
        run: |
          VERSION="${{ github.ref_type == 'tag' && github.ref_name || format('v{0}.0.0', github.run_number) }}"
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          ./appimagetool --appimage-extract
          
          # Build AppImage with version in filename
          ./squashfs-root/AppRun AppDir -n -u "gh-releases-zsync|scarryaa|crystal|latest|Crystal-*-x86_64.AppImage.zsync" "${{ env.APP_NAME }}-linux-$APP_VERSION.AppImage"
      
      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: ${{ env.APP_NAME }}-linux-*.AppImage
          if-no-files-found: error

  test-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
       
      - name: Analyze project source
        run: flutter analyze
      
      - name: Run tests
        run: flutter test || echo "No tests found"

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
          pattern: "*-build"
          merge-multiple: true

      - name: Create version.json
        run: |
          mkdir -p release
          VERSION="${{ github.ref_type == 'tag' && github.ref_name || env.APP_VERSION }}"
          echo "{
            \"version\": \"$VERSION\",
            \"assets\": {
              \"windows\": \"${{ env.APP_NAME }}-windows-$VERSION.zip\",
              \"macos\": \"${{ env.APP_NAME }}-macos-$VERSION.zip\",
              \"linux\": \"${{ env.APP_NAME }}-linux-$VERSION.AppImage\"
            }
          }" > release/version.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
 
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || env.APP_VERSION }}
          name: Release ${{ github.ref_type == 'tag' && github.ref_name || env.APP_VERSION }}
          draft: false
          prerelease: false
          files: |
            release/*
            downloaded-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


